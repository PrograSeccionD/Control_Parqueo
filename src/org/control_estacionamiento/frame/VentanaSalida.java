/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.control_estacionamiento.frame;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import org.control_estacionamiento.bean.Parqueo;
import org.control_estacionamiento.bean.Tarifa;
import org.control_estacionamiento.bean.Ticket;
import org.control_estacionamiento.controlador.ControladorParqueo;
import org.control_estacionamiento.controlador.ControladorTicket;

/**
 *
 * @author dafuentes
 */
public class VentanaSalida extends javax.swing.JDialog {
    
    protected SimpleDateFormat timeFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm aa");
    private ControladorTicket ctl_ticket = new ControladorTicket().getInstance();
    private JFormattedTextField txt_entrada;
    private JFormattedTextField txt_salida;
    private JFormattedTextField txt_placa;
    private Parqueo parqueo_disponible;
    private JFormattedTextField txt_tarifa;
    private JFormattedTextField txt_total;
    private JFormattedTextField txt_parqueo;
    private Date currentTime;
    private JButton btn_guardar;
    /**
     * Creates new form VentanaSalida
     */
    public VentanaSalida(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        agregarComponente();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_menu = new javax.swing.JPanel();
        pnl_accion = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnl_menu.setLayout(new java.awt.GridLayout(8, 2, 10, 5));

        pnl_accion.setLayout(new java.awt.GridLayout(1, 0, 2, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnl_menu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(pnl_accion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(372, 372, 372))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(pnl_menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 231, Short.MAX_VALUE)
                .addComponent(pnl_accion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaSalida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaSalida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaSalida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaSalida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                VentanaSalida dialog = new VentanaSalida(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    public void agregarComponente() {
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setSize(425, 335);
        
        // PLACA
        JLabel lbl_placa = new JLabel("PLACA",SwingConstants.CENTER);
        txt_placa = new JFormattedTextField();
        pnl_menu.add(lbl_placa);
        pnl_menu.add(txt_placa);
        
        // Boton buscar
        JLabel lbl_buscar = new JLabel("");
        JButton btn_buscar = new JButton("Buscar");
        btn_buscar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
               btnBuscarActionPerformed(e);
            }
        }); 
        pnl_menu.add(lbl_buscar);
        pnl_menu.add(btn_buscar);
        // HORA ENTRADA
        JLabel lbl_entrada = new JLabel("FECHA Y HORA",SwingConstants.CENTER);
        txt_entrada = new JFormattedTextField();
        Calendar currentCalendar = Calendar.getInstance();
        currentTime = currentCalendar.getTime();
        //txt_entrada.setValue(timeFormat.format(currentTime));
        txt_entrada.setEditable(false);
        pnl_menu.add(lbl_entrada);
        pnl_menu.add(txt_entrada);
        
        // HORA SALIDA
        JLabel lbl_salida = new JLabel("FECHA Y HORA SALIDA",SwingConstants.CENTER);
        txt_salida = new JFormattedTextField();
        txt_salida.setValue(timeFormat.format(currentTime));
        txt_salida.setEditable(false);
        pnl_menu.add(lbl_salida);
        pnl_menu.add(txt_salida);
        
        // TARIFA
        JLabel lbl_tarifa = new JLabel("TARIFA",SwingConstants.CENTER);
        txt_tarifa = new JFormattedTextField();
        //txt_tarifa.setValue(Tarifa.getTarifa());
        txt_tarifa.setEditable(false);
        pnl_menu.add(lbl_tarifa);
        pnl_menu.add(txt_tarifa);
        
        // TOTAL
        JLabel lbl_total = new JLabel("TOTAL",SwingConstants.CENTER);
        txt_total = new JFormattedTextField();
        //txt_total.setValue(Tarifa.getTarifa());
        txt_total.setEditable(false);
        pnl_menu.add(lbl_total);
        pnl_menu.add(txt_total); 
        
        // PARQUEO
        JLabel lbl_parqueo = new JLabel("PARQUEO ASIGNADO",SwingConstants.CENTER);
        
        ControladorParqueo ctl_parqueo = new ControladorParqueo().getInstance();
        txt_parqueo = new JFormattedTextField();
        btn_guardar = new JButton("Guardar");
        btn_guardar.setEnabled(false);
        btn_guardar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
               btnGuardarActionPerformed(e);
            }
        }); 
        txt_parqueo.setEditable(false);
        pnl_menu.add(lbl_parqueo);
        pnl_menu.add(txt_parqueo);
        
        
        JButton btn_cancelar = new JButton("Cancelar");
        btn_cancelar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
               btnCancelarActionPerformed(e);
            }
        });   
        pnl_accion.add(btn_guardar);
        pnl_accion.add(btn_cancelar);
    }
    
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {
        this.dispose();
    }
    
    private void btnBuscarActionPerformed(ActionEvent evt) {
        Ticket ticket = ctl_ticket.getTicket(txt_placa.getText());
        if (ticket != null) {
            btn_guardar.setEnabled(true);
            txt_entrada.setValue(timeFormat.format(ticket.getHoraEntrada()));
            txt_parqueo.setValue(ticket.getParqueo().getUbicacion().getDescripcion() + " - " + ticket.getParqueo().getDescripcion());
            txt_tarifa.setValue(ticket.getTarifa());
            long inicial = ticket.getHoraEntrada().getTime();
            long fin = currentTime.getTime();
            parqueo_disponible = ticket.getParqueo();
            long resta= fin - inicial;
            resta=resta /(1000*60);
            double tarifa = 0;
            if (Tarifa.getTiempo() <= resta) {
                tarifa = ticket.getTarifa() * resta;
            }
            txt_total.setValue(tarifa);
        } else {
            txt_entrada.setValue("");
            txt_parqueo.setValue("");
            txt_tarifa.setValue(0);
            txt_total.setValue(0);
            parqueo_disponible = null;
            btn_guardar.setEnabled(false);
        }
    }
    
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {
        if (parqueo_disponible != null) {
            Ticket ticket = ctl_ticket.getTicket(txt_placa.getText());
            if (ticket != null) {
                ticket.setHoraSalida(currentTime);
                ticket.setPagado(true);
                ticket.setTotal(Double.parseDouble(txt_total.getText()));
                parqueo_disponible.setDisponible(true);
            }
        }
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnl_accion;
    private javax.swing.JPanel pnl_menu;
    // End of variables declaration//GEN-END:variables
}
